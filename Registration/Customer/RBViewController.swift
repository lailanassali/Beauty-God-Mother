//
//  RBViewController.swift
//  Beauty God Mother
//
//  Created by Anisha  KATUMBA  on 04/01/2019.
//  Copyright Â© 2019 BGM. All rights reserved.
//

import UIKit
import Firebase
import FirebaseDatabase

class RBViewController: UIViewController {
    
    @IBOutlet weak var name: UITextField!
    @IBOutlet weak var emailTF: UITextField!
    @IBOutlet weak var passwordTF: UITextField!
    @IBOutlet weak var confirmPasswordTF: UITextField!
    @IBOutlet weak var nameFormatAlert: UILabel!
    @IBOutlet weak var passwordMatchAlert: UILabel!
    @IBOutlet weak var fieldsEmptyAlert: UILabel!
    
    
    var isEnabled = true
    override func viewDidLoad() {
        super.viewDidLoad()
        nameFormatAlert.isHidden = true
        passwordMatchAlert.isHidden = true
        fieldsEmptyAlert.isHidden = true
    }
    
    @IBAction func registerPressed(_ sender: Any) {
            handleRegister()
    
    }

    @IBAction func goBackToLogin(_ sender: UIButton) {
        navigationController?.popViewController(animated: true)
    }
    
    func nameFormatIsCorrect(name: String) -> Bool {
        if name.count <= 20 {
            return true
        } else {
            nameFormatAlert?.isHidden = false
            return false }
    }
   
    
    
    func passwordMatches(password:String, confirmPassword:String) -> Bool {
        if password == confirmPassword {
            return true
        } else {
           passwordMatchAlert?.isHidden = false
            return false
        }
    }
    

    
    public func fieldsAreNotEmpty(name: String, password: String, confirmPassword: String, email: String) -> Bool {
        if name.count != 0 && password.count != 0 && confirmPassword.count != 0 && email.count != 0 {
            return true
        } else {

            fieldsEmptyAlert.isHidden = false
            return false
        }
    }
    
    
    public func handleRegister() {
        
        // Stage 1
        guard let name = name.text, let email = emailTF.text, let password = passwordTF.text, let confirmPassword = confirmPasswordTF.text else {return}
       // Stage 2
        if !passwordMatches(password: password, confirmPassword: confirmPassword) || !nameFormatIsCorrect(name: name) || !fieldsAreNotEmpty(name: name, password: password, confirmPassword: confirmPassword, email: email) { return }
        
        
        Auth.auth().createUser(withEmail: email, password: password) { (result:AuthDataResult?, error) in
            if let error = error {
                print("Failed to create User:",error)
                return
            }
            
//             Save id generated by Firebase
            guard let uid = result?.user.uid else {return}
            
            // Database Structure
            let dictionaryValues = ["name": name,
                                    "email": email,
                                    "kind": "customer"]
            // Save values to uid
            let values = [uid:dictionaryValues]
            Database.database().reference().child("users").updateChildValues(values, withCompletionBlock: { (err, ref) in
                if let err = error {
                    print("Failed to save user to database:",err)
                    return
                    
                    
                }
                
                print("Sucessfully added \(name) to database!")
                self.performSegue(withIdentifier: "buyerToConfirmation", sender: self)
            })
        }
    }
    
    func createAlertForFieldConstraints(title:String, message:String) {
        
        let alert = UIAlertController.init(title: "title", message: "message", preferredStyle: .alert)
        
        alert.addAction(UIAlertAction.init(title: "OK", style: .default, handler: { (action) in
            alert.dismiss(animated: true, completion: nil)
        }))
        self.present(alert, animated: true, completion: nil)
    }
  
}
